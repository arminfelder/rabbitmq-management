  # vim:sw=2:et:
  ct-$(CT_SUITE):
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-$(CT_SUITE)
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: $(ERLANG_VERSION)
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: $(ELIXIR_VERSION)
      - name: CACHE DEPS
        uses: actions/cache@v1
        with:
          path: deps
          key: otp-$(ERLANG_VERSION)_git-${{ github.sha }}_deps
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          make ct-$(CT_SUITE) \
            base_rmq_ref=$(base_rmq_ref) \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1
      - name: HONEYCOMB
        run: |
          curl -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
              -d '{"repository":"'"$(PROJECT)"'",\
                   "branch":"'"${GITHUB_REF#refs/*/}"'",\
                   "sha":"'"$${ github.sha }"'",\
                   "success":"'"success()"'"}' \
              "https://api.honeycomb.io/1/events/rabbitmq-management-ci"
      - name: CACHE SECONDARY UMBRELLAS
        if: success() && '$(ERLANG_VERSION_IS)' == 'oldest'
        uses: actions/cache@v1
        with:
          path: umbrellas
          key: git-${{ github.sha }}_secondary_umbrellas
      - name: RUN TESTS [mixed-versions]
        if: success() && '$(ERLANG_VERSION_IS)' == 'oldest'
        run: |
          set -x
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d $umbrella
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-$(CT_SUITE) \
              base_rmq_ref=$(base_rmq_ref) \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS=
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-$(CT_SUITE)-logs
          path: "*-ct-logs-*.tar.xz"
